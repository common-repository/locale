<?php

namespace Locale\Locale\Support;

use Locale\Locale\Entities\TranslatedPosts;
use Locale\Locale\Entities\TranslationJob;
use Locale\Locale\Exceptions\CannotDownloadWithoutLinkException;
use Locale\Locale\Exceptions\TranslationResultDownloadErrorException;
use function download_url;
use function file_exists;
use function file_get_contents;
use function is_wp_error;
use function json_decode;
use function unlink;

/**
 * Responsible for downloading the translations for a given translation job.
 *
 * @package Locale\Locale\Support
 *
 * @author  Peter Cortez <peter@locale.to>
 */
class TranslationImport
{
    /**
     * @var \Locale\Locale\Entities\TranslationJob
     */
    protected $translationJob;

    /**
     * The path to the JSON file containing the translations.
     *
     * @var bool|string|\WP_Error
     */
    protected $translationFilePath;

    public function __construct(TranslationJob $translationJob)
    {
        $this->translationJob = $translationJob;

        if (! $this->translationJob->hasDownloadLink()) {
            throw new CannotDownloadWithoutLinkException;
        }

        $this->translationFilePath = download_url(
            $this->translationJob->getDownloadLink()
        );
        if (is_wp_error($this->translationFilePath)) {
            throw new TranslationResultDownloadErrorException(
                $this->translationFilePath->get_error_message()
            );
        }
    }

    public function __destruct()
    {
        if ($this->translationFilePath !== null && file_exists($this->translationFilePath)) {
            // WordPress' download_url() function doesn't delete the file after it
            // has been read so it is our own responsibility to dispose of the file
            // when this class' instance is destroyed.
            unlink($this->translationFilePath);
        }
    }

    /**
     * Returns an array of translations, generated by the translation job.
     *
     * @return array
     */
    public function getTranslations()
    {
        $translations = json_decode(file_get_contents($this->translationFilePath));
        $posts = new TranslatedPosts;

        foreach ($translations->segments->data as $post) {
            // This will aggregate the exact matches of the locale codes from the
            // translations' response, against the locale codes configured in
            // MultilingualPress sites.
            $posts->aggregate($post->id, $post->value, $post->localeCode);
        }

        foreach ($translations->segments->data as $post) {
            // And this, will aggregate similar matches, by looping through the
            // translation response locale code's similar sites
            $language = new Language($post->localeCode);
            foreach ($language->getSimilarSites() as $site) {
                $hasSimilar = $posts->aggregate(
                    $post->id,
                    $post->value,
                    $site->get_lang_code()
                );

                if ($hasSimilar) {
                    // and will stop once it finds something similar, and aggregates
                    // it. The aggregation will return false if an existing
                    // translation has already been added previously.
                    break;
                }
            }
        }

        return $posts->toArray();
    }
}
